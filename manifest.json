{
  "globals": {
    "source": {
      "type": "Value",
      "value": "quickbooks"
    },
    "clientId": {
      "type": "Global",
      "value": "env.CLIENT_ID"
    },
    "clientSecret": {
      "type": "Global",
      "value": "env.CLIENT_SECRET"
    },
    "pool": {
      "type": "Module",
      "module": "@hossapp/sql",
      "functionName": "createPostgresPool",
      "params": {
        "url": {
          "type": "Global",
          "value": "env.DATABASE_URL"
        }
      }
    },
    "oauthClient": {
      "type": "Module",
      "module": "simple-oauth2",
      "className": "AuthorizationCode",
      "constructorParams": {
        "client": {
          "type": "Code",
          "value": "({id:globals.env.CLIENT_ID,secret:globals.env.CLIENT_SECRET})"
        },
        "auth": {
          "type": "Code",
          "value": "({tokenHost:'https://oauth.platform.intuit.com',\"authorizeHost\":\"https://appcenter.intuit.com\",\"tokenPath\":\"/oauth2/v1/tokens/bearer\",\"authorizePath\":\"/connect/oauth2\"})"
        }
      }
    }
  },
  "triggers": {
    "authorize": {
      "module": "@hossapp/http",
      "version": "1.0.0",
      "functionName": "listener",
      "flow": "authorize",
      "params": {
        "path": "/authorize",
        "method": "GET"
      },
      "result": {
        "statusCode": {
          "type": "Value",
          "value": 302
        },
        "headers": {
          "type": "Code",
          "value": "({Location: context.steps.authorize})"
        }
      }
    },
    "authorizeCallback": {
      "module": "@hossapp/http",
      "version": "1.0.0",
      "functionName": "listener",
      "flow": "authorizeCallback",
      "params": {
        "path": "/authorizeCallback",
        "method": "GET"
      },
      "result": {
        "statusCode": {
          "type": "Value",
          "value": 302
        },
        "headers": {
          "type": "Code",
          "value": "({Location: \"https://www.tesorio.com\"})"
        }
      }
    }
  },
  "flows": {
    "authorize": {
      "start": "authorize",
      "steps": {
        "authorize": {
          "type": "Module",
          "module": "@hossapp/oauth",
          "version": "1.0.0",
          "functionName": "authorize",
          "params": {
            "client": {
              "type": "Global",
              "value": "oauthClient"
            },
            "callbackUrl": {
              "type": "Value",
              "value": "https://apitracker.ngrok.io/authorizeCallback"
            },
            "scope": {
              "type": "Value",
              "value": "com.intuit.quickbooks.accounting"
            },
            "state": {
              "type": "Context",
              "value": "trigger.request.query.userId"
            }
          },
          "end": true
        }
      }
    },
    "authorizeCallback": {
      "start": "authorizeCallback",
      "steps": {
        "authorizeCallback": {
          "type": "Module",
          "module": "@hossapp/oauth",
          "version": "1.0.0",
          "functionName": "authorizeCallback",
          "params": {
            "client": {
              "type": "Global",
              "value": "oauthClient"
            },
            "callbackUrl": {
              "type": "Value",
              "value": "https://apitracker.ngrok.io/authorizeCallback"
            },
            "scope": {
              "type": "Value",
              "value": "com.intuit.quickbooks.accounting"
            },
            "code": {
              "type": "Context",
              "value": "trigger.request.query['code']"
            },
            "state": {
              "type": "Context",
              "value": "trigger.request.query['state']"
            },
            "realmId": {
              "type": "Context",
              "value": "trigger.request.query['realmId']"
            }
          },
          "next": "persistAccessToken"
        },
        "persistAccessToken": {
          "type": "Module",
          "module": "@hossapp/sql",
          "version": "1.0.0",
          "functionName": "query",
          "params": {
            "connection": {
              "type": "Global",
              "value": "pool"
            },
            "query": {
              "type": "Value",
              "value": "INSERT INTO oauth_tokens (source, user_id, access_token, expires_at, refresh_token, refresh_token_expires_in) VALUES ($1, $2, $3, $4, $5, $6) ON CONFLICT (user_id, source) DO UPDATE SET access_token=EXCLUDED.access_token, expires_at=EXCLUDED.expires_at,refresh_token=EXCLUDED.refresh_token,refresh_token_expires_in=EXCLUDED.refresh_token_expires_in"
            },
            "params": {
              "type": "Code",
              "value": "[globals.source, context.trigger.request.query.state, context.steps.authorizeCallback.token.access_token, context.steps.authorizeCallback.token.expires_at, context.steps.authorizeCallback.token.refresh_token, context.steps.authorizeCallback.token.x_refresh_token_expires_in]"
            }
          },
          "next": "triggerSync"
        },
        "triggerSync": {
          "type": "Flow",
          "value": "sync",
          "params": {
            "userId": {
              "type": "Context",
              "value": "trigger.request.query['state']"
            }
          },
          "async": true,
          "end": true
        }
      }
    },
    "sync": {
      "start": "findLastSyncTimestamp",
      "steps": {
        "findLastSyncTimestamp": {
          "type": "Module",
          "module": "@hossapp/sql",
          "version": "1.0.0",
          "functionName": "query",
          "params": {
            "connection": {
              "type": "Global",
              "value": "pool"
            },
            "query": {
              "type": "Value",
              "value": "SELECT case count(*) when 0 then now() - interval '2 year' else max(ts) end AS ts from last_sync_timestamp WHERE user_id=$1 AND source=$2"
            },
            "params": {
              "type": "Code",
              "value": "[context.trigger.params.userId, globals.source]"
            }
          },
          "next": "getAccessToken"
        },
        "getAccessToken": {
          "type": "Module",
          "module": "@hossapp/sql",
          "version": "1.0.0",
          "functionName": "query",
          "params": {
            "connection": {
              "type": "Global",
              "value": "pool"
            },
            "query": {
              "type": "Value",
              "value": "SELECT access_token, refresh_token from oauth_tokens WHERE user_id=$1 AND source=$2"
            },
            "params": {
              "type": "Code",
              "value": "[context.trigger.params.userId, globals.source]"
            }
          },
          "next": "queryResource"
        },
        "queryResource": {
          "type": "Module",
          "module": "@hossapp/quickbooks-connector",
          "className": "QuickbooksConnector",
          "version": "1.0.0",
          "constructorParams": {
            "clientId": {
              "type": "Global",
              "value": "clientId"
            },
            "clientSecret": {
              "type": "Global",
              "value": "clientSecret"
            },
            "accessToken": {
              "type": "Context",
              "value": "steps.getAccessToken[0].access_token"
            },
            "refreshToken": {
              "type": "Context",
              "value": "steps.getAccessToken[0].refresh_token"
            },
            "realmId": {
              "type": "Value",
              "value": "4620816365148044900"
            }
          },
          "functionName": "findAccounts",
          "onError": "quickbooksErrorHandler",
          "next": "transformResponse"
        },
        "transformResponse": {
          "type": "Module",
          "module": "@hossapp/transform",
          "version": "1.0.0",
          "functionName": "transformJSON",
          "next": "saveResources",
          "params": {
            "input": {
              "type": "Context",
              "value": "steps.queryResource"
            },
            "jsonataExpression": {
              "type": "Code",
              "value": "`QueryResponse.Account.{\"userId\":\"${context.trigger.params.userId}\",\"name\": Name,\"subAccount\": SubAccount,\"currentBalance\":CurrentBalance,\"createdAt\": MetaData.CreateTime,\"updatedAt\": MetaData.LastUpdatedTime,\"type\": AccountType, \"subType\": AccountSubType, \"id\": Id}`"
            }
          }
        },
        "saveResources": {
          "type": "Module",
          "module": "@hossapp/iterator",
          "version": "1.0.0",
          "functionName": "series",
          "end": true,
          "params": {
            "values": {
              "type": "Context",
              "value": "steps.transformResponse"
            },
            "flow": {
              "type": "Value",
              "value": "saveSingleRecord"
            },
            "continueIfError": {
              "type": "Value",
              "value": "true"
            }
          }
        },
        "quickbooksErrorHandler": {
          "code": "context.response={statusCode: 500, body: 'internal server error'};",
          "end": true
        }
      }
    },
    "saveSingleRecord": {
      "start": "saveSingleRecord",
      "steps": {
        "saveSingleRecord": {
          "type": "Module",
          "module": "@hossapp/sql",
          "version": "1.0.0",
          "functionName": "query",
          "end": true,
          "params": {
            "connection": {
              "type": "Global",
              "value": "pool"
            },
            "query": {
              "type": "Value",
              "value": "INSERT INTO accounts (user_id, qb_id, name, subtype, sub_account, current_balance, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) ON CONFLICT (user_id, qb_id) DO UPDATE SET name=EXCLUDED.name, subtype=EXCLUDED.subtype,sub_account=EXCLUDED.sub_account,current_balance=EXCLUDED.current_balance,updated_at=EXCLUDED.updated_at"
            },
            "params": {
              "type": "Code",
              "value": "[context.trigger.params.userId, context.trigger.params.id, context.trigger.params.name, context.trigger.params.subtype, context.trigger.params.subAccount, context.trigger.params.currentBalance, context.trigger.params.createdAt, context.trigger.params.updatedAt]"
            }
          }
        }
      }
    }
  }
}
